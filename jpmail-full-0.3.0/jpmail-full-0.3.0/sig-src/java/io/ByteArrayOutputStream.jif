/* This is Jif signature for a Java class.
 *
 * This file provides a Jif signature for Jif code 
 * to be compiled against. However, this signature is 
 * disregarded at runtime, and instead the standard 
 * Java class files are used.
 *
 * Methods are marked as native to avoid the need to
 * provide an implementation for them.
 */
package java.io;

public class ByteArrayOutputStream[label L] extends OutputStream[L] {
    private static int __JIF_SIG_OF_JAVA_CLASS$20030619 = 0;

    public ByteArrayOutputStream() {
//    		try {
//    			this(32);
//    		} catch (IllegalArgumentException impossible) {} 
    }

    public ByteArrayOutputStream(int{L} size) throws (IllegalArgumentException{L}){
        if (size < 0) {
            throw new IllegalArgumentException("Negative initial size: "
                                               + size);
        }
//	buf = new byte[size];
    }

    // should the outputs be {L;this} ?
    public native void write{L}(int{L} b);
    public native void write{L}(byte{L}[]{L} b, int{L} off, int{L} len);
    public native void writeTo{L}(OutputStream[L]{L} out) throws (IOException{L});
    public native void reset{L}();
    public native byte{L}[]{L} toByteArray();
    public native int{L} size();
    public native String{L} toString();
    public native String{L} toString(String{L} enc) throws (UnsupportedEncodingException{L});
    public native String{L} toString(int{L} hibyte);
    public native void close{L}() throws (IOException{L});
}
