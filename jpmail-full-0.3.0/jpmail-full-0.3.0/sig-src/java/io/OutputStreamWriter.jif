/* This is Jif signature for a Java class.
 *
 * This file provides a Jif signature for Jif code 
 * to be compiled against. However, this signature is 
 * disregarded at runtime, and instead the standard 
 * Java class files are used.
 *
 * Methods are marked as native to avoid the need to
 * provide an implementation for them.
 */
package java.io;

public class OutputStreamWriter[label L] extends Writer[L] {
    private static int __JIF_SIG_OF_JAVA_CLASS$20030619 = 0;

    public OutputStreamWriter(OutputStream[L] out) {}
    //    Create an OutputStreamWriter that uses the default character encoding.
	
    //OutputStreamWriter(OutputStream out,  Charset cs);
    //    Create an OutputStreamWriter that uses the given charset.

    //OutputStreamWriter(OutputStream out,  CharsetEncoder enc);
    //    Create an OutputStreamWriter that uses the given charset encoder.

    //OutputStreamWriter(OutputStream out,  String charsetName);
    //    Create an OutputStreamWriter that uses the named charset.
   
    // Method Summary

    public native void close{L}() throws (IOException{L});
    //    Close the stream.

    public native void flush{L}() throws (IOException{L});
    //    Flush the stream.

    public native String getEncoding{L}();
    //    Return the name of the character encoding being used by this stream.

    public native void write{L}(char{L}[]{L} cbuf,  int{L} off,  int{L} len) throws (IOException{L});
    //    Write a portion of an array of characters.
    
    public native void write{L}(int{L} c) throws (IOException{L});
    //    Write a single character.

    public native void write{L}(String{L} str,  int{L} off,  int{L} len) throws (IOException{L});
    //    Write a portion of a string.

    /*
    public InputStreamReader(InputStream[L] in) {}
    public native int{L;cbuf} read{L;cbuf}(char{L}[] cbuf, int{L} off, int{L} len) throws (IOException{L;cbuf});
    public native boolean{L} ready() throws (IOException{L});
    public native void close{L}() throws (IOException{L});
    */
}
