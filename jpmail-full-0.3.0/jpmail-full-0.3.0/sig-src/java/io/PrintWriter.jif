/* This is Jif signature for a Java class.
 *
 * This file provides a Jif signature for Jif code 
 * to be compiled against. However, this signature is 
 * disregarded at runtime, and instead the standard 
 * Java class files are used.
 *
 * Methods are marked as native to avoid the need to
 * provide an implementation for them.
 */
package java.io;

public class PrintWriter[label L] extends Writer[L] {
    private static int __JIF_SIG_OF_JAVA_CLASS$20030619 = 0;

    //protected Writer[L] out;

    //private boolean autoFlush = false;
    //private boolean trouble = false;

    //private String lineSeparator;

    public PrintWriter (Writer[L]{L} out) {
	this(out, false);
    }

    public PrintWriter(Writer[L]{L} out,
		       boolean{L} autoFlush) {
	super(out);
	//	this.out = out;
	//	this.autoFlush = autoFlush;
	//	lineSeparator = (String) java.security.AccessController.doPrivileged(
	//               new sun.security.action.GetPropertyAction("line.separator"));
    }

    public PrintWriter(OutputStream[L]{L} out) {
    	this(out, false);
    }

    public PrintWriter(OutputStream[L]{L} out, boolean{L} autoFlush) {
	//       	this(new BufferedWriter[L](new OutputStreamWriter[L](out)), autoFlush);
    }

    /* Check to make sure that the stream has not been closed */
    //    private void ensureOpen() throws IOException {
    //	if (out == null)
    //	    throw new IOException("Stream closed");
    //    }

    public native void close{L}() throws (IOException{L});
    public native void flush{L}() throws (IOException{L});
    public native void newLine{L}() throws (IOException{L});
    public native void write{L}(char{L}[]{L} cbuf,  int{L} off,  int{L} len) throws (IOException{L});
    public native void write{L}(int{L} c) throws (IOException{L});
    public native void write{L}(String{L} s,  int{L} off,  int{L} len) throws (IOException{L});

    public native void print{L}();
    // Terminate the current line by writing the line separator string.

    public native void print{L}(boolean{L} x);
    // Print a boolean value and then terminate the line.

    public native void print{L}(char{L} x);
    // Print a character and then terminate the line.

    public native void print{L}(char{L}[]{L} x);
    // Print an array of characters and then terminate the line.

    public native void print{L}(double{L} x);
    // Print a double-precision floating-point number and then terminate the line.

    public native void print{L}(float{L} x);
    // Print a floating-point number and then terminate the line.

    public native void print{L}(int{L} x);
    // Print an integer and then terminate the line.

    public native void print{L}(long{L} x);
    // int a long integer and then terminate the line.

    public native void print{L}(Object{L} x);
    // Print an Object and then terminate the line.

    public native void print{L}(String{L} x);
    // Print a String and then terminate the line.

    public native void println{L}();
    // Terminate the current line by writing the line separator string.

    public native void println{L}(boolean{L} x);
    // Print a boolean value and then terminate the line.

    public native void println{L}(char{L} x);
    // Print a character and then terminate the line.

    public native void println{L}(char{L}[]{L} x);
    // Print an array of characters and then terminate the line.

    public native void println{L}(double{L} x);
    // Print a double-precision floating-point number and then terminate the line.

    public native void println{L}(float{L} x);
    // Print a floating-point number and then terminate the line.

    public native void println{L}(int{L} x);
    // Print an integer and then terminate the line.

    public native void println{L}(long{L} x);
    // int a long integer and then terminate the line.

    public native void println{L}(Object{L} x);
    // Print an Object and then terminate the line.

    public native void println{L}(String{L} x);
    // Print a String and then terminate the line.
    /*
    public native int{L;cbuf} read{cbuf;L}(char{L}[] cbuf, int{L} off, int{L} len) throws (IOException{L;cbuf});

    public native String{L;ignoreLF} readLine{L;ignoreLF}(boolean ignoreLF) throws (IOException{L;ignoreLF});
    public native String{L} readLine{L}() throws (IOException{L});
    public native long{L} skip{L}(long{L} n) throws (IOException{L});
    public native boolean{L} ready() throws (IOException{L});
    public native boolean{L} markSupported();
    public native void mark{L}(int{L} readAheadLimit) throws (IOException{L});
    public native void reset{L}() throws (IOException{L});
    public native void close{L}() throws (IOException{L});
    */
}
