/* This is Jif signature for a Java class.
 *
 * This file provides a Jif signature for Jif code 
 * to be compiled against. However, this signature is 
 * disregarded at runtime, and instead the standard 
 * Java class files are used.
 *
 * Methods are marked as native to avoid the need to
 * provide an implementation for them.
 */
package java.io;

public class StringReader[label L] extends Reader[L] {
    private static int __JIF_SIG_OF_JAVA_CLASS$20030619 = 0;

    public StringReader(String s) {}
    // Create a new string reader.
    
    // Methods

    public native void close{L}();
    // Close the stream.

    public native void mark{L}(int{L} readAheadLimit) throws (IOException{L});
    // Mark the present position in the stream.

    public native boolean markSupported();
    // Tell whether this stream supports the mark() operation, which it does.

    public native int{L} read{L}() throws (IOException{L});
    // Read a single character.

    public native int{L;cbuf} read{L;cbuf}(char{L}[] cbuf,  int{L} off,  int{L} len) throws (IOException{L;cbuf});
    // Read characters into a portion of an array.

    public native boolean{L} ready() throws (IOException{L});
    // Tell whether this stream is ready to be read.

    public native void reset{L}() throws (IOException{L});
    // Reset the stream to the most recent mark, or to the beginning 
    // of the  string if it has never been marked. 

    public native long{L} skip{L}(long{L} ns);

//     public BufferedReader(Reader[L] in, int{L} sz) {}
//     public BufferedReader(Reader[L] in) {}


//     public native int{L;cbuf} read{cbuf;L}(char{L}[] cbuf, int{L} off, int{L} len) throws (IOException{L;cbuf});

//     public native String{L;ignoreLF} readLine{L;ignoreLF}(boolean ignoreLF) throws (IOException{L;ignoreLF});
//     public native String{L} readLine{L}() throws (IOException{L});
//     public native long{L} skip{L}(long{L} n) throws (IOException{L});
//     public native boolean{L} ready() throws (IOException{L});
//     public native boolean{L} markSupported();
//     public native void mark{L}(int{L} readAheadLimit) throws (IOException{L});
//     public native void reset{L}() throws (IOException{L});
//     public native void close{L}() throws (IOException{L});

}
