/*
 * @(#)SecureRandom.java	1.42 03/01/23
 *
 * Copyright 2003 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */
 
package java.security;


public class SecureRandom extends java.util.Random {
	private static int __JIF_SIG_OF_JAVA_CLASS$20030619 = 0;

    /**
     * The provider.
     *
     * @serial
     * @since 1.2
     */
    public SecureRandom() {}

    public SecureRandom(byte{this} seed[]) {}

    public native static SecureRandom{algorithm} getInstance(String algorithm)
	throws (NoSuchAlgorithmException{algorithm}) ;


//    public native static SecureRandom{algorithm;provider} getInstance(String algorithm, String provider)
//	throws NoSuchAlgorithmException, NoSuchProviderException
//    {
//	if (provider == null || provider.length() == 0)
//	    throw new IllegalArgumentException("missing provider");
//	Object[] objs = Security.getImpl(algorithm, "SecureRandom", provider);
//	return new SecureRandom((SecureRandomSpi)objs[0], (Provider)objs[1]);
 //   }

//    public static SecureRandom getInstance(String algorithm,
//					   Provider provider)
//	throws NoSuchAlgorithmException
//  {
//	if (provider == null)
//	    throw new IllegalArgumentException("missing provider");
//	Object[] objs = Security.getImpl(algorithm, "SecureRandom", provider);
//	return new SecureRandom((SecureRandomSpi)objs[0], (Provider)objs[1]);
//  }
 
 //   public final Provider getProvider() {
//	return provider;
//    }

//    synchronized public native void setSeed(byte[] seed) ;

//    public native void setSeed(long seed) ;

    synchronized native public void nextBytes(byte[] bytes) ;

    public native static byte{numBytes}[]{numBytes} getSeed(int numBytes) ;

    public native byte{numBytes}[]{numBytes} generateSeed(int numBytes) ;

    // Declare serialVersionUID to be compatible with JDK1.1
    static final long serialVersionUID = 4940670005562187L;

    // Retain unused values serialized from JDK1.1
    /**
     * @serial
     */
}
