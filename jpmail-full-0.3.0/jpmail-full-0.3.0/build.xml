<project name="sigs" default="jpmail" basedir=".">
	<description>Jif local sigs build file</description>

	<!-- ****************************************
       set global properties for this build
       ****************************************  -->

	<!-- The OS-specific native include directory. If we can't figure it out
       automatically, it may need to be set explicitly -->
	<!--  <property name="jif-runtime-native.java-include-dir"
                location="${env.JAVA_HOME}/include/linux"/> -->

	<!-- javac executable -->
	<property name="javac" location="/usr/bin/javac" />

	<!-- Jif distribution directory -->
	<property name="jif-basedir" location="/usr/local/jif-2.0.1"/>

	<!-- signature source directory -->
	<property name="my-sig-src" location="${basedir}/sig-src" />

	<!-- directory for class file targets of signature source code -->
	<property name="my-sig-classes" location="${basedir}/sig-classes" />

	<!-- crypto source directory -->
	<property name="my-crypto-src" location="${basedir}/jifcrypto/src" />

	<!-- directory for class file targets of all source code -->
	<property name="my-classes" location="${basedir}/classes" />
	
	<!--location of crypto jar -->
	<property name="crypto-jar" location="${basedir}/jifcrypto/jars/bcprov-jdk14-131.jar" />

	<!-- binaries directory -->
	<property name="bin" location="${jif-basedir}/bin" />

	<!-- jifc executable -->
	<property name="jifc" location="${bin}/jifc" />

	<!-- jif executable -->
	<property name="jif" location="${bin}/jif" />

	<!-- set the prefix for accessing environment variables -->
	<property environment="env" />

	<!-- directory where policies are stored -->
	<property name="policy.dir" location="${basedir}/jifpol/policies" />

	<!-- default policy file -->
	<property name="policy.file" value="basic_policy.txt" />

	<!-- directory where policies are stored -->
	<property name="policy.outputdir" location="${basedir}/jifpol/polsrc" />

	<!-- load policy properties from external properties file defining policy.{dir,file,outputdir} -->
	<property file="policy.properties" />
	
	<!-- ****************************************
       The Business
       ****************************************  -->

	<target name="clean" description="clean up the sig and other classes">
		<!-- Delete the ${classes} and ${sig-classes} directory trees -->
		<delete dir="${my-sig-classes}" />
		<delete dir="${my-classes}" />
		<delete dir="${policy.outputdir}" />
	</target>

	<!-- Update the Jif distribution with our crypto/policy Runtime system extensions -->
	<target name="jif-update" description="update the Jif compiler with our runtime system extensions">
		<copy todir="${jif-basedir}">
			<fileset dir="${basedir}/jifpol/jif-updates" />
		</copy>
		<!-- recompile jif compiler with extensions -->
		<exec executable="ant" 
			   dir="${jif-basedir}">
			<arg value="jif-runtime" />
			<arg value="jif-sig" />
			<arg value="jif-lib" />
			<arg value="jar" />
		</exec>
	</target>
	
	<!-- The Jif signatures for standard java classes, e.g. java.lang.Object -->
	<target name="jif-sig" description="compile the signature classes">
		<mkdir dir="${my-sig-classes}" />
		<apply executable="${jifc}" 
		       parallel="true" 
		       failonerror="true" 
		       dest="${basedir}" 
		       relative="true" 
		       skipemptyfilesets="true" 
		       vmlauncher="false">
			<arg value="-explain" />
			<arg value="-d" />
			<arg value="sig-classes" />
			<arg value="-sourcepath" />
			<arg value="sig-src" />
			<srcfile />
			<fileset dir="${basedir}" />
			<mapper type="regexp" from="^sig-src(.*)\.jif" to="sig-classes\1\.class" />
		</apply>

	</target>
	<!-- The Jif signatures for crypto classes, e.g. crypto.AES -->
	<target name="jifcrypto" depends = "jif-sig" description="compile the crypto classes">
		<mkdir dir="${my-classes}" />
		<apply executable="${jifc}" 
		       parallel="true" 
		       failonerror="true" 
		       dest="${basedir}" 
		       relative="true" 
		       skipemptyfilesets="true" 
		       vmlauncher="false">
			<arg value="-explain" />
			<arg value="-addsigcp" />
			<arg value="${my-sig-classes}" />
			<arg value="-d" />
			<arg value="classes" />
			<arg value="-sourcepath" />
			<arg value="jifcrypto/src" />
			<arg value="-cp" />
			<arg value="${crypto-jar}" />
			<srcfile />
			<fileset dir="${basedir}" includes="jifcrypto/src/**/*.jif" />
			<mapper type="regexp" from="^jifcrypto/src(.*)\.jif" to="classes\1\.class" />
		</apply>

	</target>

	<!-- The Jif signatures for Jif/Policy classes, e.g. policy.KeyPrincipal 
		Note: this presumes Jif has been updated; this should be done separately -->
	<target name="jifpol" depends="jif-sig,jifcrypto" description="compile the policy classes">
		<mkdir dir="${my-classes}" />
		<javac srcdir="${basedir}/jifpol"
			   destdir="${basedir}"
		       deprecation="off"
		       optimize="on" >
			<include name="jifpolicytool/*.java"/>
		</javac>
		<javac srcdir="${basedir}/jifpol/com"
		       destdir="${my-classes}"
		       deprecation="off"
		       optimize="on" >
			<include name="**/*.java"/>
		</javac>
		<apply executable="${jifc}" 
		       parallel="true" 
		       failonerror="true" 
		       dest="${basedir}" 
		       relative="true" 
		       skipemptyfilesets="true" 
		       vmlauncher="false">
			<arg value="-explain" />
			<arg value="-addsigcp" />
			<arg value="${my-sig-classes}" />
			<arg value="-d" />
			<arg value="classes" />
			<arg value="-sourcepath" />
			<arg value="jifpol/src" />
			<arg value="-cp" />
			<arg value="${basedir}/classes" />
<!--			<arg value="-cp" />
			<arg value="${basedir}/jifcrypto/jars/bcprov-jdk14-131.jar" />
-->			<srcfile />
			<fileset dir="${basedir}" includes="jifpol/src/**/*.jif" excludes="jifpol/src/util/NewPassword.jif" />
			<mapper type="regexp" from="^jifpol/src(.*)\.jif" to="classes\1\.class" />
		</apply>

	</target>

	<!-- The Jif signatures for Jif/Policy classes, e.g. policy.KeyPrincipal -->
	<target name="makepolicy" depends="jifpol" description="compile a policy into .class files">
		<delete dir="${policy.outputdir/policy}" />  <!--clean out anything left over-->
		<mkdir dir="${policy.outputdir}" />
		<mkdir dir="${policy.outputdir}/policy" />
		<!-- create Jif source from policy -->
		<java dir="${basedir}/jifpol"
		       classname="jifpolicytool.Parser" >				
			<arg value="${policy.dir}/${policy.file}" />
			<arg value="${policy.outputdir}" />
		</java>
		<!--can't jif-compile newly created policy files until supporting classes are available
			so leave this to projects that use the files -->
	</target>

	<!-- The Jif files for JPmail; but not the ones that depend on policy.JifPolicy -->
	<target name="jpmail-base" depends="makepolicy" description="compile the base classes">
		<mkdir dir="${my-classes}" />
		<apply executable="${jifc}" 
		       parallel="true" 
		       failonerror="true" 
		       dest="${basedir}" 
		       relative="true" 
		       skipemptyfilesets="true" 
		       vmlauncher="false">
			<arg value="-explain" />
			<arg value="-addsigcp" />
			<arg value="${my-sig-classes}" />
			<arg value="-d" />
			<arg value="classes" />
			<arg value="-sourcepath" />
			<arg value="jpmail/src" />
			<arg value="-cp" />
			<arg value="${basedir}/classes:${crypto-jar}" />
			<srcfile />
			<fileset dir="${basedir}" 
				includes="jpmail/src/**/*.jif" 
				excludes="jpmail/src/pop3/JPMailMessage.jif jpmail/src/smtp/MailSenderCrypto.jif jpmail/src/pop3/MailReaderCrypto.jif"/>
			<mapper type="regexp" from="^jpmail/src(.*)\.jif" to="classes\1\.class" />
		</apply>
		<!-- now compile the special policy files for this application -->
		<apply executable="${jifc}"  
		       parallel="true" 
		       failonerror="true" 
		       dest="${basedir}" 
		       relative="true" 
		       skipemptyfilesets="true" 
		       vmlauncher="false">
			<arg value="-explain" />
			<arg value="-addsigcp" />
			<arg value="${my-sig-classes}" />
			<arg value="-d" />
			<arg value="classes" />
			<arg value="-sourcepath" />
			<arg value="jifpol/polsrc" />
			<arg value="-cp" />
			<arg value="${basedir}/classes" />
			<srcfile />
			<fileset dir="${basedir}" includes="jifpol/polsrc/**/JifPolicy.jif" />
			<mapper type="regexp" from="^jifpol/polsrc(.*)\.jif" to="classes\1\.class" />
		</apply>



	</target>

	<!-- The Jif files for JPmail -->
	<target name="jpmail" depends="jpmail-base" description="compile the main classes">
		<mkdir dir="${my-classes}" />
		<apply executable="${jifc}" 
		       parallel="true" 
		       failonerror="true" 
		       dest="${basedir}" 
		       relative="true" 
		       skipemptyfilesets="true" 
		       vmlauncher="false">
			<arg value="-explain" />
			<arg value="-addsigcp" />
			<arg value="${my-sig-classes}" />
			<arg value="-d" />
			<arg value="classes" />
			<arg value="-sourcepath" />
			<arg value="jpmail/src" />
			<arg value="-cp" />
			<arg value="${basedir}/classes" />
			<srcfile />
			<fileset dir="${basedir}" 
				includes="jpmail/src/pop3/JPMailMessage.jif jpmail/src/smtp/MailSenderCrypto.jif jpmail/src/pop3/MailReaderCrypto.jif"/>
			<mapper type="regexp" from="^jpmail/src(.*)\.jif" to="classes\1\.class" />
		</apply>

	</target>

	<property file="mail.properties" />
	<property name="jpmail-bin" location="${basedir}" />
	<property name="jpsendmail" location="${jpmail-bin}/jpsendmail" />
	<property name="jpgetmail" location="${jpmail-bin}/jpgetmail" />
	
	<target name="make-script-defs" description="make scripts to send mail and receive mail">
		<!--<condition property="defs.load_library_path" value="PATH">
			<os family="windows" />
		</condition>
		<condition property="defs.load_library_path" value="LD_LIBRARY_PATH">
			<os family="unix" />
		</condition>-->
		<echo file="${jpmail-bin}/defs" append="no">#!/bin/sh
# DO NOT EDIT - This file was automatically generated.

#!/bin/sh
JIF='${jif}'
MAILADDRESS='${args.my-email-address}'
USER='${args.principal}'
SMTPSERVER='${args.smtp-server}'
SMTP_LOGIN_ID='${args.smtp-username}'
POP3SERVER='${args.pop3-server}'
POP3_LOGIN_ID='${args.pop3-username}'
JIF_CP='${jif-basedir}/classes'
CRYPTO_JAR='${crypto-jar}'
JPMAIL_CP='${my-classes}'
	    </echo>
	</target>

	<target name="executables" description="creates the executable scripts jpsendmail and jpgetmail">

		<!-- make sure the definitions file is around -->
		<antcall target="make-script-defs" />

		<!-- Create jpsendmail -->
		<concat destfile="${jpsendmail}" append="no">
			<filelist dir="${jpmail-bin}" files="defs" />
		</concat>
		<concat destfile="${jpsendmail}" append="yes">
$$JIF -cp $$JIF_CP:$$CRYPTO_JAR:$$JPMAIL_CP smtp.MailSenderCrypto $$USER $$SMTPSERVER $$SMTP_LOGIN_ID $$MAILADDRESS
	    </concat>
		<chmod perm="+x" file="${jpsendmail}" />

		<!-- Create jpgetmail -->
		<concat destfile="${jpgetmail}" append="no">
			<filelist dir="${jpmail-bin}" files="defs" />
		</concat>
		<concat destfile="${jpgetmail}" append="yes">
$$JIF -cp $$JIF_CP:$$CRYPTO_JAR:$$JPMAIL_CP pop3.MailReaderCrypto $$USER $$POP3SERVER $$POP3_LOGIN_ID
	    </concat>
		<chmod perm="+x" file="${jpgetmail}" />
		
		<!-- Create setpasswords -->
		<concat destfile="${setpasswords}" append="no">
#!/bin/sh
# DO NOT EDIT - This file was automatically generated.

JIF='${jif}'
JIF_CP='${jif-basedir}/classes'
CRYPTO_JAR='${crypto-jar}'
JPMAIL_CP='${basedir}/classes'
	    
echo 'Enter password for keystore:'
$$JIF -cp $$JIF_CP:$$CRYPTO_JAR:$$JPMAIL_CP util.NewPassword - password-keystore
echo 'Enter password for POP3 account'
$$JIF -cp $$JIF_CP:$$CRYPTO_JAR:$$JPMAIL_CP util.NewPassword - password-pop3
echo 'Enter password for SMTP account'
$$JIF -cp $$JIF_CP:$$CRYPTO_JAR:$$JPMAIL_CP util.NewPassword - password-smtp
		</concat>

	</target>

	<property name="demo-dir" location="${basedir}/demo" />
	
	<target name="demo" description="sets up the demo using the CA, principals in demo/">
		<mkdir dir="${basedir}/certs" />
		<copy todir="${basedir}/certs" overwrite="yes">
			<fileset dir="${demo-dir}/certs-${args.principal}" />
		</copy>
		<copy todir="${basedir}" overwrite="yes">
			<fileset dir="${demo-dir}/passwd-${args.principal}" />
		</copy>
		<copy todir="${basedir}" overwrite="yes">
			<fileset dir="${demo-dir}" includes="password*" />
		</copy>
		<echo message="Demo set up for principal, ${args.principal}.  Now just run ./jpsendmail and ./jpgetmail to send and read mail." />
		<echo message="WARNING!! This is for demo purposes ONLY.  Using the DEMO CA and principals is NOT secure." />
		<echo message="You must create a new CA to get true security." />
		<echo message="See the INSTALL.txt for more details." />
	</target>
</project>

