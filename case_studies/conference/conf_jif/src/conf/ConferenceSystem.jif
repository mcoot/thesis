package conf;

import jif.util.HashMap;

/**
 * A system to handle the submission, approval and session allocation of papers to a conference
 */
public class ConferenceSystem[principal O] authority(O) {
    
    // private static final policy bottom = {Object x :};

    // public static ?bottom lock allocationsVisible;

    // public static final policy ifAllocationsVisible = {Object x : allocationsVisible; Organiser o :};

    // The conference chair / organiser, who can see all information even before it is public
    public final Organiser{O->_} organiser;

    // public final label AL = new label {O->*};

    private boolean{O->_} allocationsVisible;

    private int{O->_} numSubmissions;
    private Paper[{O->*}]{O->_}[]{O->_} submissions;

    // The allocation of accepted papers to allocations
    private HashMap[{O->*}, {O->*}] allocations;

    public ConferenceSystem() {
        organiser = new Organiser("TheOrganiser");

        submissions = new Paper[{O->*}][5];
        numSubmissions = 0;

        allocations = new HashMap[{O->*}, {O->*}]();
    }

    /**
     * Upgrade a paper's policy such that its authors may only be viewed under the double-blind conditions
     */
    private Paper[{O->*}]{O->_} upgradePaper{O->_}(Paper[{O->_}]{O->_} paper) {
        try {
            Author{O->_}[] paperAuthors = paper.getAuthors();
            Author{O->*}[] upgradedAuthors = new Author[paperAuthors.length];

            // Need to upgrade the policy of all authors from bottom -> ifAllocationsVisible
            try {
                for (int i = 0; i < paperAuthors.length; ++i) {
                    Author{O->_} u = paperAuthors[i];
                    upgradedAuthors[i] = u;
                }
            } catch (ArrayIndexOutOfBoundsException ex) {
                return null;
            }

            Paper[{O->*}]{O->_} upgraded = new Paper[{O->*}](paper.getTitle(), paper.getAbstract(), upgradedAuthors);

            return upgraded;
        } catch (NullPointerException ex) {
            return null;
        }

        // Paper[???] upgraded = new Paper[???](paper.getTitle(), paper.getAbstract(), upgradedAuthors);

        // return upgraded;
    }

    public void handleSubmission{O->_}(Paper[{O->_}]{O->_} paper) {
        // Can't submit after the conference sessions are already allocated
        try {
            if (!allocationsVisible) {
                submissions[numSubmissions] = upgradePaper(paper);
                numSubmissions++;

                // Resize array if required
                if (numSubmissions >= submissions.length) {
                    Paper[{O->*}][]{O->_} newSubmissions = new Paper[numSubmissions * 2];
                    for (int i = 0; i < submissions.length; ++i) {
                        newSubmissions[i] = submissions[i];
                    }
                    submissions = newSubmissions;
                }
            }
        } catch (ArrayIndexOutOfBoundsException ex) {
            
        } catch (NegativeArraySizeException ex) {
            
        } catch (NullPointerException ex) {

        }
    }

    public Paper[{O->*}][]{O->_} getSubmissions() {
        try {
            return this.submissions.clone();
        } catch (NullPointerException ex) {
            return new Paper[{O->*}][2];
        }
    }

    public int{O->_} getSessionNumber{O->_}(Paper[{O->_}]{O->_} paper) {
        Paper[{O->*}]{O->_} upgradedPaper = upgradePaper(paper);
        if (allocationsVisible) {
            return declassifySessionNumber(upgradedPaper);
        } else {
            return -1;
        }
    }

    private int{O->_} declassifySessionNumber{O->_}(Paper[{O->*}]{O->_} paper):{O->_} where authority(O) {
        JifObject[{O->*}]{O->*} sNoObj;
        try {
            sNoObj = allocations.get(new label {O->*}, paper);
        } catch (NullPointerException e) {
            return -1;
        }

        // Declassify the object retrieved from the map
        JifObject[{O->*}]{O->_} sNoObjDeclass = declassify(sNoObj, {O->*} to {O->_});

        // Convert it to a JifInteger
        JifInteger[{O->*}]{O->_} sNo;
        try {
            sNo = (JifInteger[{O->*}])sNoObjDeclass;
        } catch (ClassCastException ex) {
            return -1;
        }

        // Pull the int from the JifInteger
        int{O->*} r;
        try {
            r = sNo.intValue();
        } catch (NullPointerException ex) {
            return -1;
        }

        // Declassify the int
        int{O->_} result = declassify(r, {O->*} to {O->_});

        return result;
    }

    public void performAllocations{}() {
        // Arbitrary allocation - just give each paper a unique session number
        try {
            for (int i = 0; i < numSubmissions; ++i) {
                allocations.put(submissions[i], new JifInteger[{O->*}](i));
            }
        } catch (ArrayIndexOutOfBoundsException ex) {

        } catch (NullPointerException ex) {

        }
    }

    public void setAllocationsVisible{}() {
        allocationsVisible = true;
        // open allocationsVisible;
    }

}
