package conf;

import java.io.PrintStream;
import jif.runtime.Runtime;

public class Main authority (Alice, Bob, Charles, Dennis, Eve, Organiser) {

    private static ConferenceSystem[Organiser] conferenceSystem;

    private static Paper[{Organiser->_}][]{Organiser->_} papers;

    public static final void main{Alice<-* meet Bob<-* meet Charles<-* meet Dennis<-* meet Eve<-* meet Organiser<-* meet p<-*}
            (principal{} p, String[] args) : {Alice<-* meet Bob<-* meet Charles<-* meet Dennis<-* meet Eve<-* meet Organiser<-* meet p<-*}
            throws SecurityException, IllegalArgumentException
            where authority (Alice, Bob, Charles, Dennis, Eve, Organiser), caller(p) {

        PrintStream[{}] out1 = null;
        
        // Construct an output stream for the principal who is running the application
        try {
            Runtime[Organiser] runtime = Runtime[Organiser].getRuntime();
            out1 = runtime==null?null:runtime.stdout(new label {});
        }
        catch (SecurityException e) {
            // just let organiserOut be null.
        }

        PrintStream[{}] out2 = endorse(out1, {Organiser->*} to {Organiser->*;Alice<-* meet Bob<-* meet Charles<-* meet Dennis<-* meet Eve<-* meet Organiser<-* meet p<-*});
        PrintStream[{}] out = declassify(out2, {Organiser->_;Alice<-* meet Bob<-* meet Charles<-* meet Dennis<-* meet Eve<-* meet Organiser<-* meet p<-*});

        if (out == null) throw new IllegalArgumentException("Out is null :(");

        out.println("Conference system" +
                         "\n-----------------\n");

        out.println("Initialising system...");
        setupDummyData();

        // if (conferenceSystem == null) throw new IllegalArgumentException("Conference system borked :(");

        // Retrieve papers
        Paper[{Organiser->*}][] retrievedPapers = new Paper[{Organiser->*}][2];
        try {
            retrievedPapers = conferenceSystem.getSubmissions();
        } catch (NullPointerException ex) {

        } 

        out.println("Performing session allocations [secret]");

        // Perform the allocations
        conferenceSystem.performAllocations();

        out.println();
        
        // Allocations to sessions have been made, but are not visible to authors yet!
        out.println("Allocations completed [secret]: attempting to retrieve session numbers:");

        // // Attempt to print out allocations (should return consistent default value of -1)
        // printAllocations();

        // System.out.println();
        

        // // Cannot attempt to show authors of submissions as this causes compile error!
        // // printOutAuthors(retrievedPapers);

        // System.out.println("Printing out (secret) author information via organiser channel:");

        // // The organiser can print out papers' authors though!
        // try {
        //     printOutAuthorsOrganiser(conferenceSystem.organiser, retrievedPapers);
        // } catch (NullPointerException ex) {}
        
        // System.out.println();

        // // Mark allocations as visible (i.e. notification date expired)
        // conferenceSystem.setAllocationsVisible();

        // System.out.println("Allocations made public: attempting to retrieve session numbers:");

        // // Print out allocations again (now available)
        // printAllocations();
        
        // System.out.println();

        // System.out.println("Printing out (no longer secret) author information via public channel:");

        // // Can now print out authors of submissions
        // printOutAuthors(retrievedPapers);

    }

    // private static final PrintStream[{owner->*}]{owner->_} getOutputStream{owner->*}(principal owner) {
    //     PrintStream[{owner->*}]{owner->*} out = null;
    //     try {
    //         Runtime[owner] runtime = Runtime[owner].getRuntime();
    //         out = runtime.out();
    //     } catch (SecurityException ex) {
    //         return null;
    //     } catch (NullPointerException ex) {
    //         return null;
    //     }

    //     // Declassify output
    //     PrintStream[{owner->*}]{owner->_} outDeclass = declassify(out, {owner->*} to {owner->_});

    //     return null;
    //     // return out;
    // }

    // /**
    //  * Print out the authors of a given set of papers; requires allocations to be visible
    //  */
    // private static
    // ~ConferenceSystem.allocationsVisible
    // !bottom
    // void printOutAuthors(?bottom Paper<ConferenceSystem.ifAllocationsVisible>[]<bottom> retrievedPapers) {
    //     System.out.println("Papers and authors: ");

    //     for (?bottom int i = 0; i < retrievedPapers.length; ++i) {
    //         if (retrievedPapers[i] == null) continue;
    //         System.out.print(retrievedPapers[i].getTitle() + ": ");
    //         String sep = "";
    //         ?ConferenceSystem.ifAllocationsVisible Author[]<ConferenceSystem.ifAllocationsVisible> authors = retrievedPapers[i].getAuthors();
    //         for (?bottom int j = 0; j < authors.length; ++j) {
    //             ?ConferenceSystem.ifAllocationsVisible Author author = authors[j];
    //             System.out.print(sep + author.toString());
    //             sep = ", ";
    //         }
    //         System.out.println();
    //     }
    // }

    // /**
    //  * Have the privileged organiser print out a given set of papers (can)
    //  */
    // private static
    // !bottom
    // void printOutAuthorsOrganiser(?bottom Organiser organiser, ?bottom Paper<ConferenceSystem.ifAllocationsVisible>[]<bottom> retrievedPapers) {
    //     organiser.channel.println("Papers and authors: ");

    //     for (?bottom int i = 0; i < retrievedPapers.length; ++i) {
    //         if (retrievedPapers[i] == null) continue;
    //         try {
    //             final Object oself = organiser.self;
    //             organiser.channel.print(retrievedPapers[i].getTitle() + ": ");
    //             ?{oself:} String sep = "";
    //             ?ConferenceSystem.ifAllocationsVisible Author[]<ConferenceSystem.ifAllocationsVisible> authors = retrievedPapers[i].getAuthors();
    //             for (?bottom int j = 0; j < authors.length; ++j) {
    //                 final ?{oself:} Author author = authors[j];
    //                 ?{oself:} Author author2 = author;
    //                 organiser.channel.print(sep);
    //                 organiser.channel.print(author.toString());
    //                 sep = ", ";
    //             }
    //         } catch (NullPointerException e) {}
    //         organiser.channel.println();
    //     }
    // }

    private static void setupDummyData{Organiser->_}() where authority (Organiser) {
        conferenceSystem = new ConferenceSystem[Organiser]();

        Author alice = new Author("Alice");
        Author bob = new Author("Bob");
        Author charles = new Author("Charles");
        Author dennis = new Author("Dennis");
        Author eve = new Author("Eve");

        Author{Organiser->_}[] allAuthors = {alice, bob, charles, dennis, eve};
        Author{Organiser->_}[] authorsABC = {alice, bob, charles};
        Author{Organiser->_}[] authorsDE = {dennis, eve};
        
        papers = new Paper[{Organiser->_}][3];

        try {
            
            papers[0] = new Paper[{Organiser->_}]("A Paper We Did Together", "We all did it :3", allAuthors);
            papers[1] = new Paper[{Organiser->_}]("An Excellent Paper", "Truly excellent", authorsABC);
            papers[2] = new Paper[{Organiser->_}]("A Terrible Paper", "This paper is bad", authorsDE);

            conferenceSystem.handleSubmission(papers[0]);
            conferenceSystem.handleSubmission(papers[1]);
            conferenceSystem.handleSubmission(papers[2]);
        } catch (ArrayIndexOutOfBoundsException ex) {

        } catch (NullPointerException ex) {

        }
    }

    private static void printAllocations{Organiser->_}(PrintStream[{}] out) {
        try {
            for (int i = 0; i < papers.length; ++i) {
                Paper[{Organiser->_}]{Organiser->_} curPaper = papers[i];
                int sessionNumber = conferenceSystem.getSessionNumber(curPaper);
                String{Organiser->_} result = "Session number for \"" + curPaper.getTitle() + "\": " + sessionNumber;
                out.println(result);
            }
        } catch (ArrayIndexOutOfBoundsException ex) {

        } catch (NullPointerException ex) {

        }
    }

}
