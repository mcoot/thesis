package scheduler;

public final class Calendar {

    public static final policy allUsers = CalendarEntry.allUsers;
    public static final policy attendeesOnly = CalendarEntry.attendeesOnly;

    public static final policy meme = {:};

    public static final policy calendarOwner = {user : };

    private final ?allUsers Calendar self = (Calendar)this;

    // The user who owns the calendar
    private final ?allUsers User user;

    private ?allUsers int numEntries;
    private final ?allUsers CalendarEntry[]<CalendarEntry.allUsers> entries;

    /**
     * Construct a calendar belonging to the given user
     *
     * @param user the user for this calendar
     */
    public Calendar(?allUsers User user) {
        this.user = user;
        entries = new CalendarEntry[5];
        numEntries = 0;
    }

    /**
     * Returns whether a given entry could be added to the calendar
     *
     * @param day the day the engagement is on
     * @param startHour the hour the engagement starts
     * @param endHour the hour the engagement ends
     * @param title the title of the engagement
     * @param description the engagement description
     * @param otherAttendees the attendees of the event, not including the calendar owner
     * @return true iff adding the entry would succeed, false if it would cause an exception
     */
    public ?allUsers !allUsers boolean canAddEntry(?allUsers WeekDay day, ?allUsers int startHour, ?allUsers int endHour,
                               ?allUsers String title, ?allUsers String description, ?allUsers User[]<allUsers> otherAttendees) {
        // The current user must attend events on their calendar
        ?allUsers User[]<allUsers> attendees = new User[otherAttendees.length + 1];
        attendees[0] = user;
        for (?allUsers int i = 1; i < attendees.length; ++i) {
            attendees[i] = otherAttendees[i-1];
        }

        ?allUsers CalendarEntry entry;
        try {
            entry = new CalendarEntry(day, startHour, endHour, title, description, attendees);
        } catch (CalendarException ex) {
            return false;
        }

        // Check that the entry does not overlap any existing entries
        for (?allUsers int i = 0; i < numEntries; ++i) {
            ?allUsers CalendarEntry existing = entries[i];
            if (entry.overlapsWith(existing)) {
                return false;
            }
        }

        return true;
    }

    /**
     * Add an entry to the calendar
     *
     * @param day the day the engagement is on
     * @param startHour the hour the engagement starts
     * @param endHour the hour the engagement ends
     * @param title the title of the engagement
     * @param description the engagement description
     * @param otherAttendees the attendees of the event, not including the calendar owner
     * @throws CalendarException if the entry is impossible or clashes with an existing engagement
     */
    public !allUsers void addEntry(?allUsers WeekDay day, ?allUsers int startHour, ?allUsers int endHour,
                         ?allUsers String title, ?allUsers String description, ?allUsers User[]<allUsers> otherAttendees)
            throws !allUsers CalendarException {
        // The current user must attend events on their calendar
        User[]<allUsers> attendees = new User[otherAttendees.length + 1];
        attendees[0] = user;
        for (?allUsers int i = 1; i < attendees.length; ++i) {
            attendees[i] = otherAttendees[i-1];
        }

        ?allUsers CalendarEntry entry = new CalendarEntry(day, startHour, endHour, title, description, attendees);
        // Check that the entry does not overlap any existing entries
        for (?allUsers int i = 0; i < numEntries; ++i) {
            ?allUsers CalendarEntry existing = entries[i];
            if (entry.overlapsWith(existing)) {
                throw new CalendarException("Entry would clash with existing calendar");
            }
        }

        entries[numEntries] = entry;
        numEntries++;
        
        // Expand array if needed
        if (numEntries >= entries.length) {
            CalendarEntry[] newList = new CalendarEntry[numEntries * 2];
            for (?allUsers int i = 0; i < numEntries; ++i) {
                newList[i] = entries[i];
            }
            entries = newList;
        }
    }

    public ?calendarOwner String toString() {
        ?calendarOwner String s = "";

        s += "Calendar for " + user.getName() + ":";
        s += "\n";

        for (?{Object x :} int i = 0; i < numEntries; ++i) {
            // ?{Object x : } int i = 0;
            ?calendarOwner CalendarEntry entry = entries[i];
            if (CalendarEntry.isAttending(user, entry)) {
                s += entry.toString();
                s += "\n";
            }
            
        }

        return s;
    }

}
