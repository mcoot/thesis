package scheduler;
public class Meeting
{
  public final notnull ?{java.lang.Object x:} scheduler.Meeting self;
  public final notnull ?{java.lang.Object x:} scheduler.User owner;
  public static final ?{scheduler.User u:} lock isAttending(scheduler.User, scheduler.Meeting);
  public static final ?{java.lang.Object x:} lock isOwner(scheduler.User, scheduler.Meeting);
  public final policy attendeesOnly = {scheduler.User u: scheduler.Meeting.isAttending(u,self)};
  public final policy ownerOnly = {scheduler.User u: scheduler.Meeting.isOwner(u,self)};
  public final ?ownerOnly java.lang.String title;
  public final ?policyof(this) int day;
  public final ?policyof(this) int startHour;
  public final ?policyof(this) int endHour;
  private notnull ?{java.lang.Object x:} java.util.LinkedList<scheduler.User, {java.lang.Object x:}> users;
  public +(scheduler.Meeting.isOwner(owner,self)) !{java.lang.Object x:} Meeting (notnull ?{java.lang.Object x:} scheduler.User uowner, ?policyof(this) java.lang.String dayName, ?policyof(this) int startHour, ?policyof(this) int endHour, ?ownerOnly java.lang.String title, ?{java.lang.Object x:} java.util.LinkedList<scheduler.User, policyof(this)> attendees)
  {
  }
  private static boolean meetingDetailsValid(int day, int startHour, int endHour)
  ;
  public ?(policyof(this) * policyof(day) * policyof(startHour) * policyof(endHour)) boolean overlaps(int day, int startHour, int endHour)
  ;
  public ?(policyof(this) * policyof(that)) boolean overlaps(scheduler.Meeting that)
  ;
  public ?policyof(this) int getDuration()
  ;
  public ?{java.lang.Object x:} java.util.LinkedList<scheduler.User, {java.lang.Object x:}> getUsers()
  ;
  public ?(policyof(this) * ownerOnly * policyof(o)) boolean equals(java.lang.Object o)
  ;
  public static java.lang.String getDayName(int day)
  ;
  public static int getDayValue(java.lang.String dayName)
  ;
  public ?(policyof(this) * ownerOnly) java.lang.String toString()
  ;
}