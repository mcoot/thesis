package scheduler;

import java.io.PrintStream;
import jif.runtime.Runtime;
import jif.util.LinkedList;
import jif.lang.Principal;
import jif.principals.Alice;
import jif.principals.Bob;
import jif.principals.Charles;

public class Main authority(Alice, Bob, Charles) {

    // public static final policy bottom = {Object x:};

    private static Meeting[Alice] meetingAliceBobAttend;

    public static void main{Alice<-* meet Bob<-* meet Charles<-* meet p<-*}
            (principal{} p, String[] args) : {Alice<-* meet Bob<-* meet Charles<-* meet p<-*}
            throws NullPointerException, IllegalArgumentException
            where authority(Alice, Bob, Charles), caller(p) {
         PrintStream[{}] out1 = null;
        
        // Construct an output stream for the principal who is running the application
        try {
            Runtime[p] runtime = Runtime[p].getRuntime();
            out1 = runtime==null?null:runtime.stdout(new label {});
        }
        catch (SecurityException e) {
            // just let out be null.
        }

        PrintStream[{}] out2 = endorse(out1, {p->*} to {p->*;Alice<-* meet Bob<-* meet Charles<-* meet p<-*});
        PrintStream[{}] out = declassify(out2, {p->_;Alice<-* meet Bob<-* meet Charles<-* meet p<-*});

        if (out == null) throw new IllegalArgumentException("Out is null :(");

        out.println("Calendar scheduler" +
                           "\n----------------\n");

        out.println("Initialising system...");

        final Scheduler{_->_} theScheduler = new Scheduler();
        final Principal{_->_} alice = ((Alice)Alice).getInstance();
        final Principal{_->_} bob = ((Bob)Bob).getInstance();
        final Principal{_->_} charles = ((Charles)Charles).getInstance();

        LinkedList[{_->_}]{_->_} allUsers = new LinkedList[{_->_}]();
        setupDummyData(theScheduler, allUsers, alice, bob, charles);

        // Finding out whether other users are free or not has no confidentiality constraints
        boolean scheduleCheck1 = theScheduler.attendeesFreeAtTime(allUsers,
                Meeting.getDayValue("Monday"), 9, 10);
        out.println("Are all users available at 9 - 10 on a Monday? " + scheduleCheck1);
        boolean scheduleCheck2 = theScheduler.attendeesFreeAtTime(allUsers,
                Meeting.getDayValue("Tuesday"), 9, 10);
        out.println("Are all users available at 9 - 10 on a Tuesday? " + scheduleCheck2);

        out.println();
        out.println("Alice prints her calendar:");

        // ?{aliceFromCal.self:} String aliceCalendarRep = theScheduler.getCalendar(alice).getCalendarRepresentation();
        // A user may print out all events in their own calendar (since they attend all events in their calendar)
        // Calendar aliceCal = theScheduler.getCalendar(alice);
        // IOChannel<bottom, aliceCal.user> aliceOut = new IOChannel<bottom, aliceCal.user>();
        out.println(theScheduler.getCalendar(alice).getCalendarRepresentation());
        // aliceOut.println(theScheduler.getCalendar(alice).getCalendarRepresentation());

        //  [exec] Adding for name: scheduler.User
        //  [exec] fetchType[pkg]
        //  [exec] Evaluated field "self" to have actor id: @0
        //  [exec] Evaluated field "name" to have actor id: @1

        // [exec] Adding for name: scheduler.Calendar
        // [exec] fetchType[pkg]
        // [exec] Evaluated field "user" to have actor id: @2

        // A user may not print out another user's calendar since it cannot be statically determined whether the printing user attends all of them!
        // aliceOut.println(theScheduler.getCalendar(bob).getCalendarRepresentation());

        // System.out.println();
        // System.out.println("Alice and bob print an event both attend:");

        // // Alice and bob may both print out a meeting they attend
        // alice.channel.println(meetingAliceBobAttend.toString());
        // bob.channel.println(meetingAliceBobAttend.toString());
        // // Charles may not
        // // charles.channel.println(meetingAliceBobAttend);



    }

    private static void setupDummyData{_->_}(Scheduler{_->_} theScheduler, LinkedList[{_->_}]{_->_} allUsers, Principal{_->_} alice, Principal{_->_} bob, Principal{_->_} charles) {
        LinkedList[{_->_}]{_->_} aliceOnly = new LinkedList[{_->_}]();
        LinkedList[{_->_}]{_->_} bobOnly = new LinkedList[{_->_}]();
        LinkedList[{_->_}]{_->_} charlesOnly = new LinkedList[{_->_}]();
        LinkedList[{_->_}]{_->_} alicebob = new LinkedList[{_->_}]();
        LinkedList[{_->_}]{_->_} alicecharles = new LinkedList[{_->_}]();
        LinkedList[{_->_}]{_->_} bobcharles = new LinkedList[{_->_}]();


        // Add the users to the scheduler
        theScheduler.addUser(alice);
        theScheduler.addUser(bob);
        theScheduler.addUser(charles);

        // Combinations of attendees
        JifObjectWrapper[{_->_}]{_->_} aliceWrapper = new JifObjectWrapper[{_->_}](alice);
        JifObjectWrapper[{_->_}]{_->_} bobWrapper = new JifObjectWrapper[{_->_}](bob);
        JifObjectWrapper[{_->_}]{_->_} charlesWrapper = new JifObjectWrapper[{_->_}](charles);
        aliceOnly.add(aliceWrapper);
        bobOnly.add(bobWrapper);
        charlesOnly.add(charlesWrapper);
        alicebob.add(aliceWrapper);
        alicebob.add(bobWrapper);
        alicecharles.add(aliceWrapper);
        alicecharles.add(charlesWrapper);
        bobcharles.add(bobWrapper);
        bobcharles.add(charlesWrapper);
        allUsers.add(aliceWrapper);
        allUsers.add(bobWrapper);
        allUsers.add(charlesWrapper);

        // Only making dummy schedules for Monday

        // Alice
        theScheduler.addMeeting(alice, new Meeting[alice]("Monday", 8, 10, "Coming in late", aliceOnly));
        theScheduler.addMeeting(alice, new Meeting[alice]("Monday", 12, 13, "Lunch break", aliceOnly));
        theScheduler.addMeeting(alice, new Meeting[alice]("Monday", 16, 18, "Leaving early", aliceOnly));


        // Bob meetings
        theScheduler.addMeeting(bob, new Meeting[bob]("Monday", 7, 9, "Long breaky", bobOnly));
        theScheduler.addMeeting(bob, new Meeting[bob]("Monday", 13, 14, "Nap time", bobOnly));

        // Charles meetings
        theScheduler.addMeeting(charles, new Meeting[charles]("Monday", 10, 11, "Important Serious Work", charlesOnly));

        // Some combinations
        meetingAliceBobAttend = new Meeting[alice]("Monday", 10, 12, "Catch up sesh", alicebob);
        theScheduler.addMeeting(alice, meetingAliceBobAttend);
        theScheduler.addMeeting(bob, meetingAliceBobAttend);

        Meeting m = new Meeting[alice]("Monday", 13, 14, "Alice's disciplinary hearing", alicecharles);
        theScheduler.addMeeting(alice, m);
        theScheduler.addMeeting(charles, m);

        m = new Meeting[bob]("Monday", 9, 10, "Bob's disciplinary hearing", bobcharles);
        theScheduler.addMeeting(bob, m);
        theScheduler.addMeeting(charles, m);

        m = new Meeting[alice]("Monday", 14, 15, "Departmental meeting", allUsers);
        theScheduler.addMeeting(alice, m);
        theScheduler.addMeeting(bob, m);
        theScheduler.addMeeting(charles, m);
    }

}
