package scheduler;

import jif.util.HashMap;
import jif.util.LinkedList;
import jif.lang.Principal;

public class Scheduler {

    // public static final policy bottom = {Object x:};

    private HashMap[{_->_}, {_->_}]{_->_} calendars;

    public Scheduler() {
        calendars = new HashMap[{_->_}, {_->_}]();
    }

    public Calendar[User]{_->_} getCalendar{_->_}(principal{_->_} User) {
        try {
            Principal pUser = (Principal)User;
            JifObjectWrapper[{_->_}] wP = new JifObjectWrapper[{_->_}](pUser);
            JifObjectWrapper[{_->_}] w = (JifObjectWrapper[{_->_}])calendars.get(wP);
            Calendar[User] c = (Calendar[User])w.getObject();
            return c;
        } catch (ClassCastException ex) {
            return null;
        } catch (NullPointerException ex) {
            return null;
        }
    }

    public void addUser{_->_}(principal{_->_} User) {
        try {
            Principal pUser = (Principal)User;
            JifObjectWrapper[{_->_}] w = new JifObjectWrapper[{_->_}](pUser);
            JifObjectWrapper[{_->_}] wCal = new JifObjectWrapper[{_->_}](new Calendar[User]());
            calendars.put(w, wCal);
        } catch (NullPointerException ex) {
            
        }
    }

    // public boolean{users; day; startHour; endHour} attendeesFreeAtTime(LinkedList[{_->_}] users, int day, int startHour, int endHour) {
    //     for (int i = 0; i < users.size(); ++i) {
    //         if (!calendars.get(users.get(i)).freeAtTime(day, startHour, endHour)) {
    //             return false;
    //         }
    //     }

    //     return true;
    // }

    public void addMeeting{_->_}(principal{_->_} User, Meeting[User]{User->_} meeting) {
        try {
            getCalendar(User).addMeeting(meeting);
        } catch (NullPointerException ex) {

        }
    }

}
