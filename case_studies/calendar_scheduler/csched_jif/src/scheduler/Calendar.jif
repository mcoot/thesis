package scheduler;

import java.util.LinkedList;

public class Calendar {

    public notnull final ?{Object x:} User user;

    private LinkedList<Meeting, {Object x:}> meetings;

    public Calendar(notnull ?{Object x:} User inputUser) {
        user = inputUser;

        this.meetings = new LinkedList<Meeting, {Object x:}>();
    }

    public ?({Object x:} * policyof(day) * policyof(startHour) * policyof(endHour)) boolean freeAtTime(int day, int startHour, int endHour) {
        if (endHour <= startHour) return false;

        for (int i = 0; i < meetings.size(); ++i) {
            if (meetings.get(i).overlaps(day, startHour, endHour)) {
                return false;
            }
        }

        return true;
    }

    public void addMeeting(?{Object x:} Meeting meeting) {
        // if (!freeAtTime(meeting.day, meeting.startHour, meeting.endHour) || !meeting.getUsers().contains(user)) {
        //     throw new InvalidMeetingException();
        // }
        try {
            if (meeting != null && user.equals(meeting.owner)) {
                meetings.add(meeting);
            }
        } catch (NullPointerException impossible) {

        }
    }

    public ?{Object x:} LinkedList<Meeting, {Object x:}> getMeetings() {
        return meetings;
        // return new LinkedList<>(meetings);
    }

    public ?{user:} String getCalendarRepresentation() {
        try {
            ?{user:} String s = user.toString() + "'s Calendar:\n---";

            for (int i = 0; i < meetings.size(); ++i) {
                ?{Object x:} Meeting m = meetings.get(i);
                s += "\n";
                
                if (Meeting.isOwner(user, m.self)) {
                    s += m.toString();
                }
                
            }

            return s;
        } catch (NullPointerException ex) {
            return "";
        }
    }

}
