package scheduler;

import jif.util.LinkedList;

public class Calendar[principal Owner] {

    private LinkedList[{Owner->_}]{Owner->_} meetings;

    public Calendar() {
        this.meetings = new LinkedList[{Owner->_}]();
    }

    public boolean{Owner->_; day; startHour; endHour} freeAtTime(int day, int startHour, int endHour) {
        if (endHour <= startHour) return false;

        try {
            for (int i = 0; i < meetings.size(); ++i) {
                JifObjectWrapper[{Owner->_}] w = (JifObjectWrapper[{Owner->_}])meetings.get(i);
                Meeting[Owner] m = (Meeting[Owner])w.getObject();
                if (m.overlaps(day, startHour, endHour)) {
                    return false;
                }
            }
        } catch (ClassCastException ex) {
            return false;
        } catch (IndexOutOfBoundsException ex) {
            return false;
        } catch (NullPointerException ex) {
            return false;
        }

        return true;
    }

    public void addMeeting{Owner->_}(Meeting[Owner]{Owner->_} meeting) {
        try {
            if (meeting != null) {
                meetings.add(new JifObjectWrapper[{Owner->_}](meeting));
            }
        } catch (NullPointerException impossible) {

        }
    }

    public LinkedList[{Owner->_}]{Owner->_} getMeetings() {
        return meetings;
    }

    public String{Owner->*} getCalendarRepresentation() {     
        try {
            String s = "Calendar:\n---";

            for (int i = 0; i < meetings.size(); ++i) {
                JifObjectWrapper[{Owner->_}] w = (JifObjectWrapper[{Owner->_}])meetings.get(i);
                Meeting[Owner] m = (Meeting[Owner])w.getObject();
                s += "\n";
                s += m.toString();
            }

            return s;
        } catch (IndexOutOfBoundsException ex) {
            return "";
        } catch (ClassCastException ex) {
            return "";
        } catch (NullPointerException ex) {
            return "";
        }
    }

}
