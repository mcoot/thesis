package scheduler;

import java.util.LinkedList;

public class Meeting {

    public final notnull ?{Object x:} Meeting self;

    public final notnull ?{Object x:} User owner;

    // Lock which is open when a user is attending a given meeting
    public static final ?{User u:} lock isAttending(User, Meeting);

    public static final ?{Object x:} lock isOwner(User, Meeting);

    public final policy attendeesOnly = {
            User u : isAttending(u, self)
    };

    public final policy ownerOnly = {
        User u : isOwner(u, self)
    };

    public final ?ownerOnly String title;

    public final ?policyof(this) int day;

    public final ?policyof(this) int startHour;

    public final ?policyof(this) int endHour;

    private notnull ?{Object x:} LinkedList<User, {Object x:}> users;

    public
    +isOwner(owner, self) 
    !{Object x:}
    Meeting(notnull ?{Object x:} User uowner, ?policyof(this) String dayName, ?policyof(this) int startHour, ?policyof(this) int endHour, 
                   ?ownerOnly String title, ?{Object x:} LinkedList<User, policyof(this)> attendees) {
        self = (Meeting)this;
            
            // throws !(policyof(this) * attendeesOnly) InvalidMeetingException {
        // if (!meetingDetailsValid(getDayValue(dayName), startHour, endHour)) {
        //     throw new InvalidMeetingException();
        // }
        owner = uowner;

        open isOwner(owner, self);

        this.day = getDayValue(dayName);
        this.startHour = startHour;
        this.endHour = endHour;
        this.title = title;

        

        users = new LinkedList<User, {Object x:}>();

        for (int i = 0; i < attendees.size(); ++i) {
            User u = attendees.get(i);
            open isAttending(u, self);
            this.users.add(u);
        }
    }

    private static boolean meetingDetailsValid(int day, int startHour, int endHour) {
        return (day >= 0 && day <= 6) && (startHour >= 0 && startHour <= 23) && (endHour > startHour && endHour <= 24);
    }

    public ?(policyof(this) * policyof(day) * policyof(startHour) * policyof(endHour)) boolean overlaps(int day, int startHour, int endHour) {
        return this.day == day && ((this.startHour >= startHour && this.startHour < endHour)
                || (startHour >= this.startHour && startHour < this.endHour));
    }

    public ?(policyof(this) * policyof(that)) boolean overlaps(Meeting that) {
        try {
            return overlaps(that.day, that.startHour, that.endHour);
        } catch (NullPointerException ex) {
            return false;
        }
        
    }

    public ?policyof(this) int getDuration() {
        return endHour - startHour;
    }

    public ?{Object x:} LinkedList<User, {Object x:}> getUsers() {
        return this.users;
    }

    public ?(policyof(this) * ownerOnly * policyof(o)) boolean equals(Object o) {
        Meeting that;
        try {
            that = (Meeting)o;
        } catch (ClassCastException ex) {
            return false;
        }

        try {
            return this.title.equals(that.title) && this.day == that.day && this.startHour == that.startHour
                    && this.endHour == that.endHour && this.users.equals(that.users);
        } catch (NullPointerException ex) {
            return false;
        }
    }

    // public ?(policyof(this) * attendeesOnly) int hashCode() {
    //     return 7 * title.hashCode() + 19 * this.day ^ 31 * this.startHour ^ 17 * this.endHour ^ this.title.hashCode() ^ 41 * this.users.hashCode();
    // }

    public static String getDayName(int day) {
        if (day == 0) {
            return "Sunday";
        } else if (day == 1) {
            return "Monday";
        } else if (day == 2) {
            return "Tuesday";
        } else if (day == 3) {
            return "Wednesday";
        } else if (day == 4) {
            return "Thursday";
        } else if (day == 5) {
            return "Friday";
        } else if (day == 6) {
            return "Saturday";
        } else {
            return "Invalid";
        }
    }

    public static int getDayValue(String dayName) {
        String d = dayName.toLowerCase();

        if (d.equals("sunday")) {
            return 0;
        } else if (d.equals("monday")) {
            return 1;
        } else if (d.equals("tuesday")) {
            return 2;
        } else if (d.equals("wednesday")) {
            return 3;
        } else if (d.equals("thursday")) {
            return 4;
        } else if (d.equals("friday")) {
            return 5;
        } else if (d.equals("saturday")) {
            return 6;
        } else {
            return -1;
        }
    }

    public ?(policyof(this) * ownerOnly) String toString() {
        String s = "<\"" + title + "\" | " + getDayName(this.day) + " " + this.startHour + " - " + this.endHour + " | ";

        String sep = "";
        for (int i = 0; i < this.users.size(); ++i) {
            s += sep;
            s += this.users.get(i).toString();
            sep = ", ";
        }
        s += ">";

        return s;
    }

}
